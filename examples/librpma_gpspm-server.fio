# Example of the librpma_gpspm server job

# The engine requires some options to work correctly:
# - create_serialize=0 forces specific initiation sequence

[global]
ioengine=librpma_gpspm_server
serverip=[IP address to listen on]
port=[base port; ports <port; port + numjobs - 1> will be used]
thread

# The server side spawns one thread for each expected connection from
# the client-side, opens and registers the whole provided memory.
# Each of the server threads accepts a connection on the dedicated port
# (different for each and every working thread), accepts and executes flush
# requests, and sends back a flush response for each of the requests.
# When the client is done it sends the termination notice to the server's thread.

[server]
create_serialize=0
numjobs=1
# XXX iodepth can be passed to the client side for validation along with
# the workspace description.
iodepth=[total # of ious (in sync with the client side)]
iomem_align=[page size e.g. 4KiB, 2MiB, 1GiB]
size=[size of workspace for a single connection]
filename=[device dax or an existing fsdax file]

# XXX blocksize should equal the sum of the sizes of recv and send messages.
# It is set to a fixed value now, but there is a possibility to calculate it
# at runtime (according to values suggested by protobuff-c).
blocksize=1024

# The client will terminate the server when the client will end up its job.
time_based
runtime=365d
