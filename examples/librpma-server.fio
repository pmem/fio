# Example of the librpma server job

# The engine requires some options to work correctly:
# - create_serialize=0 forces specific initiation sequence

[global]
ioengine=librpma_server
serverip=[IP address to listen on]
port=[base port; ports <port; port + numjobs - 1> will be used]
thread

# The server side spawns one thread for each expected connection from
# the client side, opens and registers the whole provided memory.
# Each of the server threads accepts a connection on the dedicated port
# (different for each and every working thread) and waits for it to end up,
# and closes itself.

[server]
create_serialize=0
num_jobs=1 [has to be the same as the value provided for the client]
iomem_align=[page size e.g. 4KiB, 2MiB, 1GiB]
size=[size of workspace for a single connection]
filename=[device dax or an existing fsdax file or "malloc" for allocation from DRAM]
